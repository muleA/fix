import { CreateMediaDto, UpdateMediaDto } from '../controllers/services/Media.dto';
import { CreateServiceFeeDto, UpdateServiceFeeDto } from '../controllers/services/ServiceFee.dto';
import { CreateProcessingTimeDto, UpdateProcessingTimeDto } from '../controllers/services/ProcessingTime.dto';
import { CreateServiceDependencyDto, UpdateServiceDependencyDto } from '../controllers/services/ServiceDependency.dto';
import { CreateLanguageDto, UpdateLanguageDto } from '../controllers/services/Language.dto';
import { CreateServiceResourceDto, UpdateServiceResourceDto } from '../controllers/services/ServiceResource.dto';
import { Service } from '../domain/services/service';
import { ServiceRepository } from '../persistence/services/service.repository';
import { CreateServiceDto, UpdateServiceDto } from '../controllers/services/service.dto';
export declare class ServiceUseCases {
    private serviceRepository;
    private servicedomain;
    private readonly logger;
    constructor(serviceRepository: ServiceRepository);
    createService(serviceDto: CreateServiceDto): Promise<Service>;
    deleteService(id: string): Promise<void>;
    getService(id: string): Promise<Service>;
    fetServices(): Promise<Service[]>;
    updateService(serviceDto: UpdateServiceDto): Promise<void>;
    addMedia(createMediaDto: CreateMediaDto): Promise<Service>;
    updateMedia(updateMediaDto: UpdateMediaDto): Promise<void>;
    deleteMedia(id: string): Promise<void>;
    updateMedias(createMediaDto: CreateMediaDto[]): Promise<void>;
    addServiceFee(createServiceFeeDto: CreateServiceFeeDto): Promise<Service>;
    updateServiceFee(updateServiceFeeDto: UpdateServiceFeeDto): Promise<void>;
    deleteServiceFee(id: string): Promise<void>;
    updateServiceFees(createServiceFeeDto: CreateServiceFeeDto[]): Promise<void>;
    addProcessingTime(createProcessingTimeDto: CreateProcessingTimeDto): Promise<Service>;
    updateProcessingTime(updateProcessingTimeDto: UpdateProcessingTimeDto): Promise<void>;
    deleteProcessingTime(id: string): Promise<void>;
    updateProcessingTimes(createProcessingTimeDto: CreateProcessingTimeDto[]): Promise<void>;
    addServiceDependency(createServiceDependencyDto: CreateServiceDependencyDto): Promise<Service>;
    updateServiceDependency(updateServiceDependencyDto: UpdateServiceDependencyDto): Promise<void>;
    deleteServiceDependency(id: string): Promise<void>;
    updateServiceDependencies(createServiceDependencyDto: CreateServiceDependencyDto[]): Promise<void>;
    addLanguage(createLanguageDto: CreateLanguageDto): Promise<Service>;
    updateLanguage(updateLanguageDto: UpdateLanguageDto): Promise<void>;
    deleteLanguage(id: string): Promise<void>;
    updateLanguages(createLanguageDto: CreateLanguageDto[]): Promise<void>;
    addServiceResource(createServiceResourceDto: CreateServiceResourceDto): Promise<Service>;
    updateServiceResource(updateServiceResourceDto: UpdateServiceResourceDto): Promise<void>;
    deleteServiceResource(id: string): Promise<void>;
    updateResources(createServiceResourceDto: CreateServiceResourceDto[]): Promise<void>;
}
