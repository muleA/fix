import { Media } from '../services/Media';
import { ServiceFee } from '../services/ServiceFee';
import { ProcessingTime } from '../services/ProcessingTime';
import { ServiceDependency } from '../services/ServiceDependency';
import { Language } from '../services/Language';
import { ApplicationForm } from '../services/ApplicationForm';
import { ServiceResource } from '../services/ServiceResource';
export declare class Service {
    constructor();
    id: string;
    name: string;
    description: string;
    code: string;
    fullyQualifiedName: string;
    medias: Media[];
    supportedQualifications: string;
    version: number;
    procedure: string;
    serviceFees: ServiceFee[];
    processingTimes: ProcessingTime[];
    serviceDependencies: ServiceDependency[];
    languages: Language[];
    applicationForm: ApplicationForm;
    serviceResources: ServiceResource[];
    targetCustomers: string;
    status: string;
    isPublic: boolean;
    isPublished: boolean;
    isArchived: boolean;
    tags: string;
    deliveryMethod: string;
    serviceOwnerId: string;
    averageRating: number;
    enableReview: boolean;
    policy: string;
    publishedOn: Date;
    createdAt: Date;
    updatedAt: Date;
    addMedia(createMedia: Media): Promise<void>;
    updateMedia(media: Media): Promise<void>;
    removeMedia(id: string): Promise<void>;
    updateMedias(medias: Media[]): Promise<void>;
    addServiceFee(createServiceFee: ServiceFee): Promise<void>;
    updateServiceFee(serviceFee: ServiceFee): Promise<void>;
    removeServiceFee(id: string): Promise<void>;
    updateServiceFees(serviceFees: ServiceFee[]): Promise<void>;
    addProcessingTime(createProcessingTime: ProcessingTime): Promise<void>;
    updateProcessingTime(processingTime: ProcessingTime): Promise<void>;
    removeProcessingTime(id: string): Promise<void>;
    updateProcessingTimes(processingTimes: ProcessingTime[]): Promise<void>;
    addServiceDependency(createServiceDependency: ServiceDependency): Promise<void>;
    updateServiceDependency(serviceDependency: ServiceDependency): Promise<void>;
    removeServiceDependency(id: string): Promise<void>;
    updateServiceDependencies(serviceDependencies: ServiceDependency[]): Promise<void>;
    addLanguage(createLanguage: Language): Promise<void>;
    updateLanguage(language: Language): Promise<void>;
    removeLanguage(id: string): Promise<void>;
    updateLanguages(languages: Language[]): Promise<void>;
    addServiceResource(createServiceResource: ServiceResource): Promise<void>;
    updateServiceResource(serviceResource: ServiceResource): Promise<void>;
    removeServiceResource(id: string): Promise<void>;
    updateResources(serviceResources: ServiceResource[]): Promise<void>;
}
